/* main.c */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <libgen.h>
#include <errno.h>
#include <string.h>
#include <getopt.h>
#include <sys/types.h>

char* splice_n_save(char *oldpat, char *newpat);
int length_of_string(char *string);
int pattern_match(char *oldpat,char *array);


int main(int argc, char *argv[]) {


  

  
//char *word = "you say goodbye I say Hello";
//char *alpha= "abcdefg";
//pattern_match("say goodbye I say Hello",word);
//strncat(alpha,word,5)
//printf("%s",alpha);
//printf("%d",pattern_match("ASSS",word));

//printf("length using my method:%d length using string length:%d \n",length_of_string(test),strlen(test));

//use strstr to find the pattern



/* 7 command-line parsing */
}

char* splice_n_save(char *oldpat, char *newpat){
static int start=0;
static int end = 0;
int length_of_old_pattern = length_of_string(oldpat);
int length_of_new_pattern = length_of_string(newpat);
char *mstr[1023];

while(end != '\0'){

if(pattern_match(oldpat,newpat) != -1){
end = pattern_match(oldpat,newpat);
if (length_of_string(mstr) > 1021){//check that length of the mastr string has not exceeeded 1023
	return -1;
}
//strncat(mstr,oldpat[])

}
}

return 0;


}
//returns length of the string
int length_of_string(char *string){
static int i;
for(i=0; string[i] != '\0'; ++i);
return i;
}
//returns index of last char in a pattern.
int pattern_match(char *oldpat,char *array){
	int array_len = length_of_string(array);
	int pattern_len = length_of_string(oldpat);
	static int i=0;
	static int j=0;
	//printf("length of pattern: %d length of array %d",pattern_len,array_len);
	for(i=0; i<array_len; i++){


	if(array[i] == oldpat[j]){
		j++;}
	else if(j == pattern_len){
		//printf("index of first index %d index of last index %d",((i)-pattern_len),i-1);
		return i;}

	
else{

	j=0;

}
return -1;


}
}

/* 8 function declarations */
